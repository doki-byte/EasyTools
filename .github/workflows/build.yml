name: Build EasyTools

on:
  push:
    tags: ['v*'] # 只在推送标签时触发
  workflow_dispatch: # 允许手动触发

# 添加权限设置
permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            platform: linux/amd64
            display-name: linux-amd64
            cc: ""
            output-dir: "linux_amd64"
          - os: windows-latest
            platform: windows/amd64
            display-name: windows-amd64
            cc: "x86_64-w64-mingw32-gcc"
            output-dir: "windows_amd64"
          - os: macos-latest
            platform: darwin/amd64
            display-name: darwin-amd64
            cc: ""
            output-dir: "darwin_amd64"
          - os: macos-latest
            platform: darwin/arm64
            display-name: darwin-arm64
            cc: ""
            output-dir: "darwin_arm64"

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend

    - name: Install Wails
      run: |
        go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.2

    - name: Install Linux dependencies (Ubuntu 24.04)
      if: matrix.os == 'ubuntu-24.04'
      run: |
        sudo apt-get update
        
        # 添加 jammy (Ubuntu 22.04) 源以获取 webkit2gtk-4.0-dev
        echo "deb http://gb.archive.ubuntu.com/ubuntu jammy main" | sudo tee -a /etc/apt/sources.list
        
        # 更新包列表
        sudo apt-get update
        
        # 安装所需的库
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev build-essential libx11-dev xvfb
        
        # 注释掉添加的源以避免潜在问题
        sudo sed -i 's/^deb http:\/\/gb.archive.ubuntu.com\/ubuntu jammy main/# deb http:\/\/gb.archive.ubuntu.com\/ubuntu jammy main/' /etc/apt/sources.list
        
        # 再次更新包列表
        sudo apt-get update
        
        # 设置 pkg-config 路径
        echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV

    - name: Build application
      shell: bash
      run: |
        echo "Building for platform: ${{ matrix.platform }}"
        # 对于 Linux 明确设置 CGO_ENABLED
        if [ "${{ matrix.os }}" == "ubuntu-24.04" ]; then
          export CGO_ENABLED=1
          export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig
        fi
        wails build --clean --platform ${{ matrix.platform }} --trimpath -ldflags="-w -s"
      env:
        CC: ${{ matrix.cc }}

    - name: Organize build output
      shell: bash
      run: |
        # 创建输出目录
        mkdir -p build/bin/${{ matrix.output-dir }}
        
        # 根据不同平台移动文件
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          # 移动 macOS 应用包
          mv build/bin/EasyTools.app build/bin/${{ matrix.output-dir }}/
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          # 移动 Windows 可执行文件
          mv build/bin/EasyTools.exe build/bin/${{ matrix.output-dir }}/
        else
          # 移动 Linux 可执行文件
          mv build/bin/EasyTools build/bin/${{ matrix.output-dir }}/
        fi

    - name: Debug - Show build output
      shell: bash
      run: |
        echo "Build directory contents:"
        ls -la build/
        echo "Build/bin directory contents:"
        ls -la build/bin/ || echo "No build/bin directory"
        echo "Platform-specific directory contents:"
        ls -la build/bin/${{ matrix.output-dir }}/ || echo "No platform-specific directory"

    - name: Install UPX (Linux)
      if: matrix.os == 'ubuntu-24.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y upx

    - name: Install UPX (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        choco install upx -y

    - name: Install UPX (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install upx

    - name: Compress with UPX (Linux)
      if: matrix.os == 'ubuntu-24.04'
      run: |
        upx ./build/bin/${{ matrix.output-dir }}/EasyTools

    - name: Compress with UPX (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        upx ./build/bin/${{ matrix.output-dir }}/EasyTools.exe

    - name: Compress with UPX (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # 压缩 macOS 应用
        if [ -f "./build/bin/${{ matrix.output-dir }}/EasyTools.app/Contents/MacOS/EasyTools" ]; then
          upx "./build/bin/${{ matrix.output-dir }}/EasyTools.app/Contents/MacOS/EasyTools" --force-macos
        fi

    - name: Package macOS app (for macOS builds)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # 为 macOS 应用创建 zip 包
        cd build/bin/${{ matrix.output-dir }}
        zip -r EasyTools-${{ matrix.display-name }}.zip EasyTools.app
        cd ../../..

    - name: Package Linux binary (for Linux builds)
      if: matrix.os == 'ubuntu-24.04'
      shell: bash
      run: |
        # 为 Linux 二进制文件创建 tar.gz 包
        cd build/bin/${{ matrix.output-dir }}
        tar -czf EasyTools-${{ matrix.display-name }}.tar.gz EasyTools
        cd ../../..

    - name: Package Windows binary (for Windows builds)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # 为 Windows 二进制文件创建 zip 包
        cd build/bin/${{ matrix.output-dir }}
        7z a EasyTools-${{ matrix.display-name }}.zip EasyTools.exe
        cd ../../..

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EasyTools-${{ matrix.display-name }}
        path: |
          build/bin/${{ matrix.output-dir }}/*

  # 更新 Release 的作业
  update-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: List downloaded artifacts
        run: |
          find ./artifacts -type f | sort
          echo "--- Directory structure ---"
          find ./artifacts -type d | sort
          
      - name: Prepare release files
        shell: bash
        run: |
          # 创建发布文件目录
          mkdir -p release-files
          
          # 复制所有构建的文件到发布目录
          for artifact_dir in ./artifacts/*; do
            if [ -d "$artifact_dir" ]; then
              platform_name=$(basename "$artifact_dir")
              echo "Processing $platform_name"
              
              # 查找 zip 或 tar.gz 文件
              zip_file=$(find "$artifact_dir" -name "*.zip" -o -name "*.tar.gz" | head -n 1)
              
              if [ -n "$zip_file" ]; then
                # 如果有打包文件，使用它
                cp "$zip_file" "./release-files/$(basename "$zip_file")"
                echo "Using packaged file: $zip_file"
              else
                # 如果没有打包文件，复制整个目录
                cp -r "$artifact_dir" "./release-files/$platform_name"
                echo "Using directory: $artifact_dir"
              fi
            fi
          done
          
          echo "--- Final release files ---"
          ls -la release-files/
          
      - name: Update Release with binaries
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}
          artifacts: "release-files/**/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true